{"ast":null,"code":"var _jsxFileName = \"/Users/danielliu/Documents/ReactProjects/food-reviewer/src/Components/SearchResults/SearchResults.js\";\nimport React from 'react';\nimport './SearchResults.css';\nimport RestaurantList from '../RestaurantList/RestaurantList';\nimport Yelp from '../../util/Yelp';\nimport SmallSearchBar from '../SmallSearchBar/SmallSearchBar';\nconst temporaryRestaurant = {\n  id: 'temporary',\n  imageUrl: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\n  name: 'Restaurant Name',\n  address1: 'Restaurant St Address',\n  city: 'Restaurant City',\n  state: 'Restaurant State',\n  zipCode: 'Restaurant Zip Code',\n  category: 'Restaurant Category',\n  rating: 5.0,\n  reviewCount: 100\n};\nlet queryString = window.location.search;\nlet urlParams = new URLSearchParams(queryString);\nlet term = urlParams.get('term');\nlet location = urlParams.get('location');\n\nclass SearchResults extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      restaurants: [],\n      isLoading: false\n    };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location) {\n    Yelp.search(term, location).then(restaurants => {\n      this.setState({\n        restaurants: restaurants\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Search-results\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SmallSearchBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }), !this.state.isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"Header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, \" Top results in \", location, \":\"), /*#__PURE__*/React.createElement(RestaurantList, {\n      restaurants: this.state.restaurants,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }\n    })) : /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 23\n      }\n    }, \" Loading... \"));\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n    Yelp.search(term, location).then(restaurants => {\n      this.setState({\n        restaurants: restaurants,\n        isLoading: false\n      });\n    });\n    /*\n    cancelablePromise.then(restaurants => {\n        this.setState({restaurants: restaurants, isLoading: false});\n    });\n    */\n  }\n\n  componentWillUnmount() {\n    /*\n    cancelablePromise.cancel();\n    */\n  }\n\n}\n/*\nconst makeCancelable = (promise) => {\n    let hasCanceled_ = false;\n\n    const wrappedPromise = new Promise((resolve, reject) => {\n        promise.then(\n            val => hasCanceled_ ? reject({isCanceled: true}) : resolve(val),\n            error => hasCanceled_ ? reject({isCanceled: true}) : reject(error)\n        );\n    });\n\n    return {\n        promise: wrappedPromise,\n        cancel() {\n            hasCanceled_ = true;\n        },\n    };\n};\n\nlet queryString = window.location.search;\nlet urlParams = new URLSearchParams(queryString);\nlet term = urlParams.get('term');\nlet location = urlParams.get('location');\n\nconst cancelablePromise = makeCancelable(Yelp.search(term, location));\n*/\n\n\nexport default SearchResults;","map":{"version":3,"sources":["/Users/danielliu/Documents/ReactProjects/food-reviewer/src/Components/SearchResults/SearchResults.js"],"names":["React","RestaurantList","Yelp","SmallSearchBar","temporaryRestaurant","id","imageUrl","name","address1","city","state","zipCode","category","rating","reviewCount","queryString","window","location","search","urlParams","URLSearchParams","term","get","SearchResults","Component","constructor","props","restaurants","isLoading","searchYelp","bind","then","setState","render","componentDidMount","componentWillUnmount"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,qBAAP;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AAEA,MAAMC,mBAAmB,GACrB;AACAC,EAAAA,EAAE,EAAE,WADJ;AAEAC,EAAAA,QAAQ,EAAE,+EAFV;AAGAC,EAAAA,IAAI,EAAE,iBAHN;AAIAC,EAAAA,QAAQ,EAAE,uBAJV;AAKAC,EAAAA,IAAI,EAAE,iBALN;AAMAC,EAAAA,KAAK,EAAE,kBANP;AAOAC,EAAAA,OAAO,EAAE,qBAPT;AAQAC,EAAAA,QAAQ,EAAE,qBARV;AASAC,EAAAA,MAAM,EAAE,GATR;AAUAC,EAAAA,WAAW,EAAE;AAVb,CADJ;AAaI,IAAIC,WAAW,GAAGC,MAAM,CAACC,QAAP,CAAgBC,MAAlC;AACI,IAAIC,SAAS,GAAG,IAAIC,eAAJ,CAAoBL,WAApB,CAAhB;AACA,IAAIM,IAAI,GAAGF,SAAS,CAACG,GAAV,CAAc,MAAd,CAAX;AACA,IAAIL,QAAQ,GAAGE,SAAS,CAACG,GAAV,CAAc,UAAd,CAAf;;AAGR,MAAMC,aAAN,SAA4BvB,KAAK,CAACwB,SAAlC,CAA4C;AAExCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAGA,SAAKhB,KAAL,GAAa;AACTiB,MAAAA,WAAW,EAAE,EADJ;AAETC,MAAAA,SAAS,EAAE;AAFF,KAAb;AAIA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAEDD,EAAAA,UAAU,CAACR,IAAD,EAAOJ,QAAP,EAAiB;AACvBf,IAAAA,IAAI,CAACgB,MAAL,CAAYG,IAAZ,EAAkBJ,QAAlB,EAA4Bc,IAA5B,CAAiCJ,WAAW,IAAI;AAC5C,WAAKK,QAAL,CAAc;AAACL,QAAAA,WAAW,EAAEA;AAAd,OAAd;AACH,KAFD;AAGH;;AACDM,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAG,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAIK,CAAC,KAAKvB,KAAL,CAAWkB,SAAZ,gBACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,EAAE,EAAG,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAmCX,QAAnC,MADJ,eAEI,oBAAC,cAAD;AAAgB,MAAA,WAAW,EAAI,KAAKP,KAAL,CAAWiB,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADC,gBAIK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBARV,CADJ;AAYH;;AAEDO,EAAAA,iBAAiB,GAAG;AAChB,SAAKF,QAAL,CAAc;AAACJ,MAAAA,SAAS,EAAE;AAAZ,KAAd;AACA1B,IAAAA,IAAI,CAACgB,MAAL,CAAYG,IAAZ,EAAkBJ,QAAlB,EAA4Bc,IAA5B,CAAiCJ,WAAW,IAAI;AAC5C,WAAKK,QAAL,CAAc;AAACL,QAAAA,WAAW,EAAEA,WAAd;AAA2BC,QAAAA,SAAS,EAAE;AAAtC,OAAd;AACH,KAFD;AAGA;;;;;AAKH;;AACDO,EAAAA,oBAAoB,GAAG;AACnB;;;AAGH;;AAhDuC;AAoD5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,eAAeZ,aAAf","sourcesContent":["import React from 'react';\nimport './SearchResults.css';\nimport RestaurantList from '../RestaurantList/RestaurantList';\nimport Yelp from '../../util/Yelp';\nimport SmallSearchBar from '../SmallSearchBar/SmallSearchBar';\n\nconst temporaryRestaurant = \n    {\n    id: 'temporary',\n    imageUrl: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\n    name: 'Restaurant Name',\n    address1: 'Restaurant St Address',\n    city: 'Restaurant City',\n    state: 'Restaurant State',\n    zipCode: 'Restaurant Zip Code',\n    category: 'Restaurant Category',\n    rating: 5.0,\n    reviewCount: 100};\n\n    let queryString = window.location.search;\n        let urlParams = new URLSearchParams(queryString);\n        let term = urlParams.get('term');\n        let location = urlParams.get('location');\n\n\nclass SearchResults extends React.Component {\n\n    constructor(props) {\n        super(props);\n        \n\n        this.state = {\n            restaurants: [],\n            isLoading: false\n        };\n        this.searchYelp = this.searchYelp.bind(this);\n    }\n\n    searchYelp(term, location) {\n        Yelp.search(term, location).then(restaurants => {\n            this.setState({restaurants: restaurants});\n        });\n    }\n    render() {\n        return (\n            <div className = \"Search-results\">\n                <SmallSearchBar/>\n                \n                \n                {!this.state.isLoading ? \n                <div>\n                    <h1 id = \"Header\"> Top results in {location}:</h1>\n                    <RestaurantList restaurants = {this.state.restaurants}/></div>\n                    : <h1> Loading... </h1>}\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        this.setState({isLoading: true});\n        Yelp.search(term, location).then(restaurants => {\n            this.setState({restaurants: restaurants, isLoading: false});\n        });\n        /*\n        cancelablePromise.then(restaurants => {\n            this.setState({restaurants: restaurants, isLoading: false});\n        });\n        */\n    }\n    componentWillUnmount() {\n        /*\n        cancelablePromise.cancel();\n        */\n    }\n}\n\n\n/*\nconst makeCancelable = (promise) => {\n    let hasCanceled_ = false;\n\n    const wrappedPromise = new Promise((resolve, reject) => {\n        promise.then(\n            val => hasCanceled_ ? reject({isCanceled: true}) : resolve(val),\n            error => hasCanceled_ ? reject({isCanceled: true}) : reject(error)\n        );\n    });\n\n    return {\n        promise: wrappedPromise,\n        cancel() {\n            hasCanceled_ = true;\n        },\n    };\n};\n\nlet queryString = window.location.search;\nlet urlParams = new URLSearchParams(queryString);\nlet term = urlParams.get('term');\nlet location = urlParams.get('location');\n\nconst cancelablePromise = makeCancelable(Yelp.search(term, location));\n*/\nexport default SearchResults;"]},"metadata":{},"sourceType":"module"}